#summary How to run and integrate MAO.

= Running Standalone MAO =

After building MAO, for each build target, a binary called {{{mao-$TARGET}}} will be placed in 
{{{./bin/.}}} For example, building a 64-bit MAO on Linux produces {{{./bin/mao-x86_64-linux}}}.

The MAO binary accepts all flags accepted by the GNU Assembler, as a matter of fact, all flags are passed on to the integrated assembler. To specify MAO specific options, use the option {{{-mao:...}}}, everything after the {{{-mao:}}} will be parsed by MAO. 

Multiple MAO options can be specified on the command line. 

Additionally, the environment variable MAOOPTS can be set. This environment variable is parsed before the actual command line parameters. It should only contain MAO specific options, without the {{{-mao:}}} prefix.

Please find more details on how to specify MAO options in OptionHandling.

The default output of MAO goes to stdout. To change the output file, the option -o can be used. For example:

{{{
  # redirect output to stderr
  ../bin/mao-x86_64-linux -mao:-o/dev/stderr,ZEE=enable,trace input.s

  # kill all output
  ../bin/mao-x86_64-linux -mao:-o/dev/null,ZEE=enable,trace input.s
}}}

To see all available options, start MAO with no command line parameters.


= Integrating MAO with gcc =

The gcc compiler runs it's input through a preprocessor and then either cc1 or cc1plus, to generate an assembly file, usually as a temporary file somewhere in {{{/tmp/...}}}. The compiler driver then call the GNU assembler 'as' to produce the final object file. 

For example, to compile foo.cc, the compiler might call:

{{{
$ gcc -o foo.o foo.cc
  ...cc1 -quiet hello.c -o /tmp/cciDot0H.s
  ...as  -V -Qy -o hello.o /tmp/cciDot0H.s
}}}

In order to benefit from MAO optimizations, MAO should be run right before the GNU assembler. There are two ways to achieve this:

   1 Replace the 'as'
   2 ...
