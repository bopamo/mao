#summary Option Handling in MAO
#labels Featured

= How to pass options to MAO =
Initial option handling code has been finalized. It's pretty ugly and likely non-robust, but this can be improved as we find trouble.

  * Mao specific options are passed in via:
       -mao:option_string

  * The option_string cannot contain spaces, individual options are separated with a comma ','

  * Multiple -mao: options can be specified.

  * All other options are passed on the assembler.

  * Starting mao with no options, or with -mao:-h, displays the help text, which shows all currently registered options:
<pre>
Mao 0.1
Usage: mao [-mao:mao-options]\* [regular-assembler-options]\* input-file

'mao-options' are seperated by commas, and are:

-h          display this help text
-v          verbose (set trace level to 3)
-ofname     specify assembly output file (also -o,fname)

PASS=[phase-option][,phase-option]\*

with PASS and 'phase-option' being:

Pass: ALL
  enable    : (bool)   En/Disable a pass
  trace     : (int)    Set trace level to 'val' (0..3)
Pass: LFIND
  vcg       : (bool)   Dump VCG file
  cfg       : (bool)   Dump CFG in text format
  lsg       : (bool)   Dump LSG in text format
Pass: CFG
  callsplit : (bool)   Split Basic Blocks at call sites
</pre>


= Pass-specific Options =

    * To specify a pass and option, this is a self-explanatory example for the syntax:
        -mao:CFG=callsplit,other_opts,PASS=...

    * Valid pass names must be followed by a '=' sign.

    * Options can have parameters, which can be specified as either:
        option:value
        option(value)
        option[value]

    * Supported option types are int, bool, and string

    * Boolean options are set to true if no parameter is specified.

    * The -v option set the tracing level for all passes to 3.

    * The enable and trace options are available for all passes.

    * For example, to enable tracing for all passes at level 3, except for pass LFIND, one would specify:
        ../bin/mao-x86_64-linux -mao:-v-o,/dev/null,LFIND=vcg,trace[0] loop2.s

= Specifying Options in Source =

To enable option processing for a pass in the mao source code:

    * A particular pass must be written as a class and must be derived from
        <tt>MaoPass</tt>

    * Options are defined via the MAO_OPTIONS_DEFINE macro, such as:
<pre>
      MAO_OPTIONS_DEFINE(CFG,1) {
        OPTION_BOOL("callsplit", false, "Split Basic Blocks at call sites"),
      };
</pre>

    * Any number of options can be specified here as a comma separated list. The number of options must be passed to the MAO_OPTIONS_DEFINE macro.

    * The options array is being passed to the MaoPass as a parameter via the MAO_OPTIONS macro. For example, the current CFG implementation looks like this:
<pre>
      // --------------------------------------------------------------------
      CFGBuilder::CFGBuilder(MaoUnit *mao_unit, MaoOptions *mao_options,
                             Section *section, CFG *CFG)
        : MaoPass("CFG", mao_options, MAO_OPTIONS(CFG)),
          mao_unit_(mao_unit), section_(section), CFG_(CFG), next_id_(0) {
        split_basic_blocks_ = GetOptionBool("callsplit");
      }
</pre>

    * Options should be held as class local variables, and can be "queried" via the GetOption... member functions from MaoPass. This is slow, and should therefore be done in the constructor of the pass, once.

That's pretty much it. Of course we can extend this in many ways, a typical extension would be to allow more option types, such as arrays, and to allow numbered passes. Well, I add that as we need it.

The option parser itself is quite a hack - I didn't spend much time on it. If your programs happens to hang on startup, the options parser likely is in an infinite loop ;-)