IAT README [BETA] - 7/9/2009
This file serves as a quick guide to using the Instruction Analysis Tool (IAT).
For more information: http://wiki.corp.google.com/twiki/bin/view/Main/SMoC
(Wiki Update in Progress)
Contacts: Casey Burkhardt - caseyburkhardt@google.com
          Sweta Mohapatra - smohapatra@google.com

Please check the Wiki page for:
  - Background and Description
  - Design Plan
  - Quality Requirements (Coming Soon)
  - Current Status

No external version of this page is currently available, but will be made
public on the code.google.com project page shortly.

Project Structure:
The project is currently divided into two sections, a Test Generator, which 
generates assembly files to be ran, and a Runner, which uploads the assembly
files to a remote server, compiles them, and uses analysis tools to record
user-defined events related to execution.  A third component to the system
will likely be added in the near future to digest the results from the
Runner and format them to be programmatically accessible.

Building the Test Generator:
The Test Generator is written in C++ and will be given a Makefile shortly,
but for now simply run the BuildTG.sh script.
# sh BuildTG.sh

Running the Test Generator:
# ./TestGenerator [--argument=value]
Currently two optional command line arguments are available to alter the
operation of the program:
  --instructions=
     - This argument specifies the number of instructions to add to the
       output assembly file.
     - Failure to supply this command line argument results in the value
       defaulting to 1,000.
  --iterations=
     - This argument specifies the number of times to iterate over the 
       instructions added
     - Failure to supply this command line argument results in the value
       defaulting to 10,000.

The Test Generator generates assembly instructions by using two data files.
See the data files' comments for more information on usage and formatting.
  - operations.txt
     - Contains information related to assembly operations, such as "add",
       and allows for the specification of a minimum and maximum number of
       possible operands for the operation.
  - operands.txt
     - Contains information related to assembly operation operands, such as
       "%eax".  This file stores both an operand value ("%eax") and an
       operand type ("r32"), both of which are required fields.

The Test Generator will place all generated assembly files, along with a
baseline assembly file, which can be used as a comparison to mitigate the loop
overhead, and an index in a subdirectory (Named with date and time) of the
execution directory.

Running the Runner:
There are two runner scripts in the execution directory, but you only need to
run the first, "runner.sh". For example, you can run the following command:

# sh runner.sh

You will automatically be prompted to input the machine with pfmon on it,
the username on that machine, the directory path on the pfmon machine on 
which you want the files to be copied to (these files will be automatically
removed) as well as the directory to be tested and the CPU event you'd
like to test for.  These values can also be set as command line arguments.

#sh runner.sh [DIRECTORY TO BE TESTED] [PFMON EVENT] [PFMON MACHINE] \
[PFMON USERNAME] [PFMON DIRECTORY PATH]

The output from the Runner will be placed in a directory named
identical to that of the Test Generator output directory with "_Results"
appended.  Pfmon output may be found in the files within that directory.
Sample pfmon commands may be found within the "pfmoncommands.txt" file. For
further questions or information on pfmon, please refer to the following
website for details: http://perfmon2.sourceforge.net/pfmon_usersguide.html


NOTE: If user@hostname requires login and breaks script,
be sure to have the following code in your .profile file:
               
     if [ -x /usr/local/scripts/ssx-agents ] ; then
       eval `/usr/local/scripts/ssx-agents $SHELL`
     fi

Questions/Contact:
Please contact us for any questions unanswered by the README file. 
  - Casey Burkhardt - caseyburkhardt@google.com
  - Sweta Mohapatra - smohapatra@google.com
