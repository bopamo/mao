//
// Copyright 2008 Google Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, 5th Floor, Boston, MA 02110-1301, USA.

// Side effect table for instructions
//
// memnonic  defs
//
// with defs being on of:
//    op0    defines operand 0  (also 'src')
//    op1    defines operand 1  (also 'dest')
//    ...
//    al     defines register al
//    ah     defines register ah
//    ...
//    cr0    control register cr0
//    ...
//    all    defines all registers
//
aaa   ax
aad   ax
aam   ax
aas   ax
adc   dest
add   dest
addpd dest
addps dest
addsd dest
addss dest
and   dest
andpd dest
andps dest
andnpd dest
andnps dest
arpl dest

blendpd dest
blendps dest
blendvpd dest
blendvps dest
bound 
bsf dest
bsr dest
bswap src
bt 
btc 
btr 
bts

call rax rcx rdx r8 r9 r10 r11
cbw  ax
cwde eax
cdqe rax
clc
cld
clflush
cli
clts cr0
cmc

cmovo   dest
cmovno  dest
cmovb   dest
cmovc   dest
cmovnae dest
cmovae  dest
cmovnc  dest
cmovnb  dest
cmove   dest
cmovz   dest
cmovne  dest
cmovnz  dest
cmovbe  dest
cmovna  dest
cmova   dest
cmovnbe dest
cmovs   dest
cmovns  dest
cmovp   dest
cmovnp  dest
cmovl   dest
cmovnge dest
cmovge  dest
cmovnl  dest
cmovle  dest
cmovng  dest
cmovg   dest
cmovnle dest

cmp
cmppd dest
cmpps dest

cmps   addr8: di si addr16: di si addr32: edi esi addr64: rsi rdi
cmpsb  addr8: di si addr16: di si addr32: edi esi addr64: rsi rdi
cmpsw  addr8: di si addr16: di si addr32: edi esi addr64: rsi rdi
cmpsd  addr8: di si addr16: di si addr32: edi esi addr64: rsi rdi
cmpsq  addr8: di si addr16: di si addr32: edi esi addr64: rsi rdi

#todo: cmpsd
#todo: cmpss

cmpexchg dest addr8: al addr16: ax addr32: eax addr64: rax
cmpxchg8B dest edx eax ecx ebx
comisd
comiss
cpuid eax ebx ecx edx
crc32 dest
cvtdq2pd dest
cvtdq2pd dest
cvtpd2dq dest
cvtpd2dq dest
cvtdq2ps dest
cvtdq2ps dest
cvtpd2pi dest
cvtpd2ps dest
cvtpd2ps dest
cvtps2pd dest
cvtps2pd dest
cvtps2dq dest
cvtps2dq dest
cvtsd2si dest
cvtsd2si dest
cvtsd2ss dest
cvtsd2ss dest
cvtss2sd dest
cvtss2sd dest
cvttpd2pi dest
cvttsd2si dest
cvttsd2si dest
cvttpd2dq dest
cvttpd2dq dest
cvttps2dq dest
cvttps2dq dest

cwd dx ax
cdq edx eax 
cqo rdx rax

daa al
das al
dec op0
div addr8: ax addr16: ax dx addr32: eax edx addr64: rax rdx
divpd dest
divps dest
divsd dest
divss dest
dppd dest
dpps dest

emms

# can be refined by compilation mode (16/32/64)
enter rbp rsp
extractps dest

# floating point instructions
# f*
# ignore for now, escept:
fist
fistp

hlt

idiv addr8: ax addr16: ax dx addr32: eax edx addr64: rdx rax
imul dest addr8: ax addr16: ax dx addr32: eax edx addr64: rdx rax
in dest
inc src

# can be refined by mode
ins  rdi 
insb rdi
insw rdi
insd rdi
insertps dest
int
into
invd
invlpg
iret  
iretd

// jumpers - don't modify regs.
jmp
ljmp
jo
jno
jb
jc
jnae
jnb
jnc
jae
je
jz
jne
jnz
jbe
jna
jnbe
ja
js
jns
jp
jpe
jnp
jpo
jl
jnge
jnl
jge
jle
jng
jnle
jg

jcxz
jecxz
jecxz
jrcxz

lahf ah
lar  dest
lddqu dest

# the special regs are not yet supported.
ldmxcsr mxcsr
lds dest ds
lss dest ss
les dest es
lfs dest fs
lgs dest gs

lea dest
leave rsp rbp
lfence 
lgdt
lidt
lldt
lmsw src
lock
lods  addr8: al addr16: ax addr32: eax addr64: rax
lodsb al
lodsw ax
lodsd eax
lodsq rax

# loops can be refined by address size
loop  rcx
loope rcx
loopne rcx
loopz rcx
loopnz rcx

lsl dest
ltr src
maskmovdqu dest
maskmovq dest
maxpd dest
maxps dest
maxsd dest
maxss dest
mfence
minpd dest
minps dest
minsd dest
minss dest

// movers and shakers
mov  dest
movapd dest
movaps dest
movabs dest
movd dest
movddup dest
movdqa dest
movdqu dest
movdq2q dest
movhlps dest
movhpd dest
movhps dest
movlhps dest
movlpd dest
movlps dest
movmskpd dest
movmskps dest
movntdqa dest
movntdq dest
movnti dest
movntpd dest
movntps dest
movntq dest
movq dest
movq2dq dest

movs   dest ecx addr8: si di addr16: si di addr32: esi edi eddr64: rsi rdi
movsb  dest ecx addr8: si di addr16: si di addr32: esi edi eddr64: rsi rdi
movsbl dest ecx addr8: si di addr16: si di addr32: esi edi eddr64: rsi rdi
movsbw dest ecx addr8: si di addr16: si di addr32: esi edi eddr64: rsi rdi
movsw  dest ecx addr8: si di addr16: si di addr32: esi edi eddr64: rsi rdi
movswl dest ecx addr8: si di addr16: si di addr32: esi edi eddr64: rsi rdi
movslq dest ecx addr8: si di addr16: si di addr32: esi edi eddr64: rsi rdi
movsd  dest ecx addr8: si di addr16: si di addr32: esi edi eddr64: rsi rdi
movsq  dest ecx addr8: si di addr16: si di addr32: esi edi eddr64: rsi rdi

# there is a floating point movsd as well?
# movsd

movupd dest
movups dest

# various zero and sign extent moves.
movbe dest
movsbl dest
movsbw dest
movswl dest
movsbq dest
movswq dest
movslq dest
movsx dest
movsxd dest
movzd dest
movzbl dest
movzbw dest
movzbl dest
movzbq dest
movabq dest
movzwq dest
movzx dest

mpsadbw dest


// SSE3 instructions
addsubpd dest
addsubps dest
cmpxchg16B dest rdx rax rcx rbx
fistpp
fistppll
haddpd dest
haddps dest
hsubpd dest
hubbps dest
lddqu dest
monitor 
movddup dest
movshdup dest
movsldup dest
mwait
